# Step-by-Step Guide to Setting Up the Script

## 1. Requirements for Web Server Setup

Before setting up the script, ensure your web server meets the following requirements:

- **PHP 5.6+ or newer**
- **ZipArchive PHP extension enabled** (to handle ZIP file creation)
- **Access to a writeable directory** (for storing generated GMAPs, counters, etc.)

## 2. Create Necessary Files and Folders

### Folder Structure:

- **maps/**: This folder will store the generated GMAP zip files. Ensure this folder is writable by the web server.
- **visitor_counter.txt**: This file will store the visitor count.
- **gmap_counter.txt**: This file will store the number of GMAPs generated.
- **download_counter.txt**: This file will store the number of GMAPs downloaded.

### Setting Up Directory Structure:

```bash
/your-website-root/
    /maps/                     # Folder to store generated GMAP zip files
    generatelevels.php          # Main script file
    visitor_counter.txt         # Tracks number of visitors
    gmap_counter.txt            # Tracks number of GMAPs generated
    download_counter.txt        # Tracks number of GMAP downloads
## 3. Required Folder Permissions

Ensure the web server has write permissions for the following:

- **maps/** folder (where GMAP zip files are stored)
- **visitor_counter.txt**, **gmap_counter.txt**, and **download_counter.txt** (for read/write access)

You can set folder and file permissions using a command like this (on Linux systems):

```bash
chmod 0777 /path/to/your-website-root/maps
chmod 0666 /path/to/your-website-root/visitor_counter.txt
chmod 0666 /path/to/your-website-root/gmap_counter.txt
chmod 0666 /path/to/your-website-root/download_counter.txt
- `0777` gives read, write, and execute permissions to everyone on the **maps/** folder, allowing the server to create files inside it.
- `0666` gives read and write permissions to everyone for the `.txt` files, so the server can modify them.

```bash
<?php
    // Start the session to track visitors uniquely using PHP session
    // -----------------------------------------
    // This section starts a session to track unique visitors. Each time
    // a new session is initiated (i.e., a new user visits the page), we
    // increment the visitor counter.
    // -----------------------------------------
    session_start();

    // Step 1: Visitor Counter Logic
    // -----------------------------------------
    // The visitor counter works by checking if the user has an active session. 
    // If not, it increments the visitor count and updates the `visitor_counter.txt` file.
    // This file stores the total number of unique visitors to the page.
    // -----------------------------------------
    if (!isset($_SESSION['has_visited'])) {
        $_SESSION['has_visited'] = true;  // Mark this session as having visited the page
        $visitor_count = file_exists("visitor_counter.txt") ? intval(file_get_contents("visitor_counter.txt")) : 0;
        $visitor_count++;
        file_put_contents("visitor_counter.txt", $visitor_count);  // Update the visitor counter
    }

    // Step 2: GMAP and Download Counters
    // -----------------------------------------
    // These counters track the number of GMAP files generated and downloaded.
    // The `gmap_counter.txt` tracks how many GMAPs have been created by users,
    // and the `download_counter.txt` tracks how many files have been downloaded.
    // These values are stored in simple text files and updated as needed.
    // -----------------------------------------
    $gmap_count = file_exists("gmap_counter.txt") ? intval(file_get_contents("gmap_counter.txt")) : 0;
    $download_count = file_exists("download_counter.txt") ? intval(file_get_contents("download_counter.txt")) : 0;

    // Step 3: Output Message
    // -----------------------------------------
    // This variable is used to store any output messages that will be displayed on the page.
    // For example, when the user successfully generates a GMAP file, they will be provided
    // with a download link. This will be stored in the `$last_output` variable.
    // -----------------------------------------
    $last_output = "";

    // Step 4: Handle Form Data (Width, Height, Prefix)
    // -----------------------------------------
    // Here we capture the form input values, such as the GMAP grid's width and height,
    // and a prefix for the GMAP's file name. The form data is submitted via POST.
    // We also validate the inputs to make sure they are safe and usable.
    // -----------------------------------------
    $gmap_prefix = isset($_POST['prefix']) ? trim($_POST['prefix']) : "";
    $width = isset($_POST['width']) ? intval($_POST['width']) : 0;
    $height = isset($_POST['height']) ? intval($_POST['height']) : 0;

    // Step 5: Handle GMAP File Download
    // -----------------------------------------
    // This section handles downloading an already generated GMAP file.
    // When a download request is made via the 'gmap' GET parameter, we check if the file exists,
    // validate the file name, and then proceed with the file download. We also increment
    // the download counter each time a file is downloaded.
    // -----------------------------------------
    if (isset($_GET['gmap'])) {
        $download_file = urldecode($_GET['gmap']); // Decode the file name from the URL

        // Ensure the file name contains only valid characters (for security reasons)
        if (preg_match('/^[^.][-a-z0-9_.]+$/i', $download_file)) {
            $download_file = "./maps/" . $download_file;  // Specify the directory of the file

            // If the file exists, proceed with the download
            if (file_exists($download_file)) {
                // Increment the download counter
                $download_count++;
                file_put_contents("download_counter.txt", $download_count);

                // Send appropriate headers to the browser for downloading the file
                header("Content-Description: File Transfer");
                header("Content-Type: application/zip");
                header("Content-Disposition: attachment; filename=\"" . basename($download_file) . "\"");
                header("Expires: 0");
                header("Cache-Control: must-revalidate");
                header("Pragma: public");
                header("Content-Length: " . filesize($download_file));
                flush();  // Flush the output buffer to send the file
                readfile($download_file);  // Send the file content to the browser
                unlink($download_file);  // Optionally delete the file after download
                exit();  // Stop further script execution after the file is downloaded
            } else {
                exit("Requested file not found.");  // If the file doesn't exist, show an error
            }
        } else {
            exit("Invalid request for file download.");  // If the file name contains invalid characters, show an error
        }
    }

    // Step 6: GMAP Generation Logic (Form Submission)
    // -----------------------------------------
    // When the user submits the form with the GMAP's width, height, and prefix, this section handles
    // generating the GMAP file. The script uses PHP's `ZipArchive` class to create a zip file,
    // and then adds levels and GMAP data inside the zip file. The user is provided with a download link
    // once the GMAP file is successfully created.
    // -----------------------------------------
    if ($width > 0 && $height > 0) {
        // Use a default prefix if none is provided
        if ($gmap_prefix === "") { $gmap_prefix = "default"; }

        // Validate the prefix for security (allow only alphanumeric characters, hyphens, and underscores)
        if (!preg_match('/^[a-z0-9_-]+$/i', $gmap_prefix)) {
            exit("Invalid characters in GMAP prefix. Only alphanumeric, hyphen, and underscore are allowed.");
        }

        $levels_count = $width * $height;  // Calculate the number of levels based on width and height

        // Create the 'maps' directory if it doesn't exist, this is where the generated files will be stored
        if (!file_exists("maps")) {
            mkdir("maps", 0777, true);  // 0777 permissions allow reading, writing, and executing by anyone
        }

        // Initialize a new Zip file for storing the GMAP levels and map data
        $zip = new ZipArchive();
        $filename = "./maps/" . $gmap_prefix . ".zip";  // The name of the zip file to be generated

        // Attempt to open the zip file for writing
        if ($zip->open($filename, ZipArchive::CREATE) !== TRUE) {
            exit("Could not open <$filename> for zipping.");  // If the file cannot be opened, exit with an error
        }

        // Create a template for the GMAP levels, this is a 64x64 grid of tiles
        $level_template = "GLEVNW01\n";
        for ($i = 0; $i < 64; $i++) {
            $level_template .= "BOARD 0 " . $i . " 64 0 ";
            for ($j = 0; $j < 64; $j++) $level_template .= "AA";  // 'AA' represents each tile
            $level_template .= "\n";
        }

        // Create the GMAP file header data
        $gmap = "GRMAP001\nWIDTH " . $width . "\nHEIGHT " . $height . "\nLEVELNAMES\n";

        // Loop through all levels (based on width and height) and add level data to the GMAP
        for ($i = 0; $i < $levels_count; $i++) {
            $x = $i % $width;  // Calculate the x position in the grid
            $y = intval($i / $width);  // Calculate the y position in the grid
            $levelname = $gmap_prefix . $i . ".nw";  // Generate a unique name for each level
            $gmap .= "\"" . $levelname . "\"";  // Add the level name to the GMAP file

            if ($i < ($levels_count - 1)) $gmap .= ",";  // Add commas between level names
            if ($x == ($width - 1)) $gmap .= "\n";  // Add a newline after each row of levels

            $level_copy = $level_template;  // Copy the level template for this level

            // Create links between levels (up, down, left, right)
            $links = "";
            if ($i + $width < $levels_count) $links .= "LINK " . $gmap_prefix . "_" . ($i + $width) . ".nw 0 0 64 1 playerx 61\n";  // Down
            if ($i + 1 < $levels_count) $links .= "LINK " . $gmap_prefix . "_" . ($i + 1) . ".nw 63 0 1 64 0 playery\n";  // Right
            if ($i - $width >= 0) $links .= "LINK " . $gmap_prefix . "_" . ($i - $width) . ".nw 0 0 64 1 playerx 61\n";  // Up
            if ($i - 1 >= 0) $links .= "LINK " . $gmap_prefix . "_" . ($i - 1) . ".nw 0 0 1 64 61 playery\n";  // Left

            // Append the links to the level file and add it to the zip
            $level_copy .= $links;
            $zip->addFromString($levelname, $level_copy);  // Save the level in the zip file
        }

        // Finalize the GMAP file by adding the GMAP header and footer
        $gmap .= "LEVELNAMESEND\n";
        $zip->addFromString($gmap_prefix . ".gmap", $gmap);  // Add the GMAP file to the zip

        // Close the zip file after adding all levels and the GMAP
        $zip->close();

        // Increment the GMAP generation counter and save it
        $gmap_count++;
        file_put_contents("gmap_counter.txt", $gmap_count);  // Update the counter for generated GMAPs

        // Provide a download link to the user for the generated GMAP
        $last_output .= "<center><a id='dllink' href='generatelevels.php?gmap=" . urlencode($gmap_prefix . ".zip") . "' onclick='clickAndDisable(this);'>Download GMAP HERE</a></center>";
    } else {
        // If no GMAP has been generated, display the current number of GMAPs created
        $last_output .= "<center>This tool has generated <b>" . $gmap_count . "</b> GMAPs so far!</center>";
    }
?>

<!-- HTML Form for Input and Display -->
<form action="generatelevels.php" method="POST" onsubmit="return validateForm();">
    <h1>GMAP Generator</h1>
    <div class="content">
        <h3>Instructions:</h3>
        <p>Fill out the form below to create a GMAP. Width and Height should be positive integers.<br>
        The prefix will be used for naming levels. For example: "GmapName_".</p>
        
        <center>
        <table>
            <tr>
                <td> Width: </td>
                <td> 
                    <input name="width" id="width" type="number" value="10" class="demension" title="Enter the width (number of columns) of the GMAP">
                </td>
            </tr>
            <tr>
                <td> Height: </td>
                <td> 
                    <input name="height" id="height" type="number" value="10" class="demension" title="Enter the height (number of rows) of the GMAP">
                </td>
            </tr>
            <tr>
                <td> Prefix: </td>
                <td> 
                    <input name="prefix" type="text" value="" class="demension" title="Enter the prefix for naming levels, e.g., 'GmapName_'">
                </td>
            </tr>
        </table>
        <br>
        <input type="submit" value="Create GMAP" class="btn" title="Click to generate the GMAP file">
        </center>
    </div>

    <!-- Progress Indicator -->
    <div id="loading" style="display: none; text-align: center; margin-top: 20px;">
        <img src="https://i.gifer.com/ZZ5H.gif" alt="Loading..." width="50px"><br>
        <span>Generating your GMAP, please wait...</span>
    </div>
</form>

<!-- Visitor, GMAP, and Download Counters -->
<div style="text-align: center; margin-top: 20px;">
    <p><b>Total Visitors:</b> <?php echo file_get_contents("visitor_counter.txt"); ?></p>
    <p><b>Total GMAPs Generated:</b> <?php echo $gmap_count; ?></p>
    <p><b>Total GMAPs Downloaded:</b> <?php echo $download_count; ?></p>
</div>

<?php echo $last_output; ?>

<!-- JavaScript for Validation and Progress Indicator -->
<script>
    // Validate the form inputs before submitting
    function validateForm() {
        var width = document.getElementById("width").value;
        var height = document.getElementById("height").value;
        var prefix = document.getElementById("prefix").value;

        if (width <= 0 || height <= 0) {
            alert("Width and Height must be positive integers.");
            return false;
        }

        // Ensure prefix only contains alphanumeric, hyphen, and underscore
        var validPrefix = /^[a-z0-9_-]+$/i;
        if (!validPrefix.test(prefix)) {
            alert("Prefix contains invalid characters. Only alphanumeric, hyphen, and underscore are allowed.");
            return false;
        }

        // Show progress indicator
        document.getElementById("loading").style.display = "block";

        return true; // Allow form submission if validation passes
    }

    // Disable the download link after it is clicked to prevent multiple downloads
    function clickAndDisable(link) {
        link.onclick = function(event) {
            event.preventDefault();
        }
    }
</script>

<!-- CSS Styling -->
<style>
    * {
        margin: 0;
        padding: 0;
        font-family: 'Roboto', sans-serif;
        color: #333;
        background-color: #f9f9f9;
    }

    h1 {
        font-size: 2em;
        text-align: center;
        color: #333;
        margin: 20px 0;
    }

    .content {
        margin: 20px auto;
        width: 500px;
        padding: 20px;
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    }

    table {
        width: 100%;
    }

    td {
        padding: 10px;
    }

    .demension {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        text-align: center;
        border-radius: 5px;
        font-size: 18px;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn:hover {
        background-color: #45a049;
    }

    #dllink {
        display: block;
        margin: 20px;
        font-size: 1.2em;
        color: #007BFF;
        text-decoration: none;
    }

    #dllink:hover {
        text-decoration: underline;
    }

    /* Add hover tooltips for form inputs */
    input[title], .btn[title] {
        position: relative;
    }

    input[title]:hover::after, .btn[title]:hover::after {
        content: attr(title);
        position: absolute;
        left: 0;
        top: -25px;
        background: #333;
        color: #fff;
        padding: 5px 10px;
        font-size: 12px;
        border-radius: 3px;
        white-space: nowrap;
        z-index: 10;
    }
</style>

# GMAP Generator

A PHP script that generates GMAP files, tracks unique visitors, and allows downloads.

## Features

- Tracks unique visitors
- Generates GMAP files
- Provides download functionality

## Detailed Explanation of Each Section

### Visitor Counter (visitor_counter.txt)
The script tracks visitors using PHP sessions. A unique visitor is counted the first time they visit the page in a session, and this number is saved to `visitor_counter.txt`.

### GMAP and Download Counters (gmap_counter.txt and download_counter.txt)
These counters track how many GMAP files have been generated and downloaded. Each time a GMAP is created or downloaded, the respective counter increments and is saved to a text file.

### GMAP Generation Logic
After the user submits the form, the script generates a GMAP file inside a ZIP archive. It uses PHP's `ZipArchive` class to create the zip file and stores the generated files in the `maps/` directory.

### File Download Logic
If the user requests to download a GMAP file, the script validates the file and serves it to the browser. After the download is complete, the download counter is incremented.

### HTML Form and Progress Indicator
The form collects the necessary inputs (width, height, prefix) from the user, and a progress indicator is shown while the GMAP is being generated.

### CSS and JavaScript
Styling ensures a modern look, while the JavaScript handles client-side validation and shows the progress indicator.

## Setting Up on Your Web Server

### Place Files on Your Server
Upload the PHP file `generatelevels.php` and ensure the directory structure includes:
- `maps/` directory (for storing GMAP zip files).
- `visitor_counter.txt`, `gmap_counter.txt`, and `download_counter.txt` (for counters).

### Set Folder and File Permissions
Ensure the web server has permission to write to the `maps/` directory and the counter files using the following `chmod` commands:

```bash
chmod 0777 /path/to/your-website-root/maps
chmod 0666 /path/to/your-website-root/visitor_counter.txt
chmod 0666 /path/to/your-website-root/gmap_counter.txt
chmod 0666 /path/to/your-website-root/download_counter.txt
This setup ensures the server can write files to the maps/ folder and update the counter text files.
Access the Script

Once everything is set up, you can visit generatelevels.php in your browser to generate GMAPs and track visitors and file downloads.
